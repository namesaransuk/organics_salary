import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:get/instance_manager.dart';
import 'package:dio/dio.dart';

import 'package:organics_salary/controllers/salary_controller.dart';
import 'package:organics_salary/service/pdf_to_image_helper.dart';
import 'package:organics_salary/service/image_download_helper.dart';
import 'package:organics_salary/theme.dart';

import 'package:syncfusion_flutter_pdfviewer/pdfviewer.dart';

class SlipViewSection extends StatefulWidget {
  final String? filePath; // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô URL ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

  const SlipViewSection({super.key, this.filePath});

  @override
  _SlipViewSectionState createState() => _SlipViewSectionState();
}

class _SlipViewSectionState extends State<SlipViewSection> {
  final SalaryController salaryController = Get.put(SalaryController());
  final GlobalKey<SfPdfViewerState> _pdfViewerKey = GlobalKey();
  final PdfViewerController _pdfViewerController = PdfViewerController();

  bool get _isUrl {
    final p = widget.filePath;
    if (p == null) return false;
    final uri = Uri.tryParse(p);
    return uri != null &&
        (uri.isAbsolute && (uri.scheme == 'http' || uri.scheme == 'https'));
  }

  @override
  Widget build(BuildContext context) {
    final src = widget.filePath;
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        onPressed: _saveFile, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
        backgroundColor: AppTheme.ognOrangeGold,
        shape: const CircleBorder(),
        child: const Icon(
          Icons.download,
          color: Colors.white,
        ),
      ),
      body: src == null || src.isEmpty
          ? const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå'))
          : _isUrl
              ? SfPdfViewer.network(
                  src,
                  key: _pdfViewerKey,
                  controller: _pdfViewerController,
                )
              : SfPdfViewer.file(
                  File(src),
                  key: _pdfViewerKey,
                  controller: _pdfViewerController,
                ),
    );
  }

  /// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
  /// - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢ Dio -> bytes
  /// - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡∏Ñ‡∏±‡∏•: ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á -> bytes
  /// ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Photos/Gallery
  Future<void> _saveFile() async {
    try {
      final path = widget.filePath;
      if (path == null || path.isEmpty) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF')),
        );
        return;
      }

      Uint8List pdfBytes;

      if (_isUrl) {
        // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏à‡∏≤‡∏Å URL
        final dio = Dio();
        final resp = await dio.get<List<int>>(
          path,
          options: Options(responseType: ResponseType.bytes),
        );
        final data = resp.data;
        if (data == null || data.isEmpty) {
          if (!mounted) return;
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
          );
          return;
        }
        pdfBytes = Uint8List.fromList(data);
      } else {
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        pdfBytes = await File(path).readAsBytes();
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô double ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì height ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô helper)
      final pngBytes = await PdfToImageHelper.firstPageAsPng(
        pdfBytes,
        targetWidth: 2048, // double
      );

      if (pngBytes == null) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
        );
        return;
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PNG ‡∏•‡∏á Photos/Gallery
      final ok = await ImageDownloadHelper.saveBytesToGallery(
        pngBytes,
        prefix: 'salary-slip', // ‡πÉ‡∏ä‡πâ prefix ‡πÅ‡∏ó‡∏ô fileName
        quality: 100,
      );

      if (ok) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå')),
        );
      }
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }
}


// import 'package:flutter/material.dart';
// import 'package:get/instance_manager.dart';
// import 'package:organics_salary/controllers/salary_controller.dart';
// import 'package:organics_salary/service/save_helper.dart';
// import 'package:organics_salary/theme.dart';
// import 'package:syncfusion_flutter_pdfviewer/pdfviewer.dart';

// class SlipViewSection extends StatefulWidget {
//   final String? filePath;

//   const SlipViewSection({super.key, this.filePath});

//   @override
//   _SlipViewSectionState createState() => _SlipViewSectionState();
// }

// class _SlipViewSectionState extends State<SlipViewSection> {
//   final SalaryController salaryController = Get.put(SalaryController());
//   final GlobalKey<SfPdfViewerState> _pdfViewerKey = GlobalKey();
//   final PdfViewerController _pdfViewerController = PdfViewerController();

//   @override
//   Widget build(BuildContext context) {
//     print(widget.filePath);
//     return Scaffold(
//       floatingActionButton: FloatingActionButton(
//         onPressed: _saveFile,
//         backgroundColor: AppTheme.ognOrangeGold,
//         shape: const CircleBorder(),
//         child: const Icon(
//           Icons.download,
//           color: Colors.white,
//         ),
//       ),
//       body: SfPdfViewer.network(
//         widget.filePath.toString(),
//         key: _pdfViewerKey,
//         controller: _pdfViewerController,
//       ),
//     );
//   }

//   Future<void> _saveFile() async {
//     try {
//       if (_pdfViewerController.pageCount > 0) {
//         List<int> bytes = await _pdfViewerController.saveDocument();
//         String fileName =
//             Uri.parse(salaryController.salaryList.value).pathSegments.last;

//         bool? result = await SaveHelper.save(bytes, fileName);

//         if (result == true) {
//           // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//           ScaffoldMessenger.of(context).showSnackBar(
//             SnackBar(
//               content: Text('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
//               duration: Duration(seconds: 2),
//             ),
//           );
//         } else {
//           // ‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡πÄ‡∏ä‡πà‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path) -> ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á SnackBar ‡πÉ‡∏î‡πÜ
//         }
//       } else {
//         // ‚ùå PDF ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
//         ScaffoldMessenger.of(context).showSnackBar(
//           SnackBar(
//             content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ'),
//             duration: Duration(seconds: 2),
//           ),
//         );
//       }
//     } catch (e) {
//       // ‚ùå ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î exception (‡πÄ‡∏ä‡πà‡∏ô user ‡∏Å‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)
//       print('User canceled or error: $e');
//       // üëâ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
//     }
//   }
// }

